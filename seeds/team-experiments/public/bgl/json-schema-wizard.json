{
  "title": "JSON Schema Wizard",
  "description": "A wizard that creates a JSON schema from a passage of text.",
  "version": "0.0.1",
  "nodes": [
    {
      "type": "input",
      "id": "input",
      "configuration": {
        "schema": {
          "type": "object",
          "properties": {
            "passage": {
              "type": "string",
              "title": "Passage",
              "examples": [
                "An ad campaign that contains 5 headlines and 3 descriptions. Each headlines must be up to 30 characters long, and each description must be up to 90 characters long."
              ],
              "format": "multiline",
              "description": "G"
            }
          },
          "required": []
        }
      },
      "metadata": {
        "visual": {
          "x": -293,
          "y": 20
        }
      }
    },
    {
      "type": "output",
      "id": "output",
      "configuration": {
        "schema": {
          "type": "object",
          "properties": {
            "text": {
              "type": "string",
              "title": "text",
              "examples": [],
              "format": "markdown"
            },
            "json": {
              "type": "object",
              "title": "Schema",
              "examples": []
            }
          },
          "required": []
        }
      },
      "metadata": {
        "visual": {
          "x": 661,
          "y": -23
        }
      }
    },
    {
      "id": "worker-5288aa40",
      "type": "worker",
      "configuration": {
        "instruction": "You are a JSON Schema expert who helps others construct great JSON Schemas. You do this by reading the passages below and creating a guide for creating a useful JSON Schema. You know that a useful JSON Schema\n\n- contains descriptions for the fields, because they can be very handy for understanding the meaning of the fields\n- uses the absolute minimum number of JSON Schema features to get the job done. Unless required, don't use them. For example, only specify required fields when they are actually required. Leave them to be optional otherwise.\n- has property names that are descriptive and clear.\n- clearly conveys the structure and the hierarchy of the data. The root element is always of object type and contains a property with the name describing the overall data structure.\n\nYou also know that a useful guide for creating a JSON schema is a list of property descriptions with the title of \"Schema guide for [infer title from the passage]\"\n\n- the root object contains the property named [name of the property describing the overall structure]\n- this property is of type [type], with description of [description] and contains the following properties (if the property is of type \"object\").\n- [list any other constraints or limits of the property]\n- [description of next property]\n- ...\n\nPASSAGES:"
      },
      "metadata": {
        "visual": {
          "x": -116,
          "y": -151
        }
      }
    },
    {
      "id": "structuredWorker-6c243b4b",
      "type": "structuredWorker",
      "configuration": {
        "instruction": "Generate a useful JSON schema based on the guide. Follow the guide precisely. You know that a useful JSON Schema\n\n- contains descriptions for the fields, because they can be very handy for understanding the meaning of the fields\n- uses the absolute minimum number of JSON Schema features to get the job done. Unless required, don't use them. For example, only specify required fields when they are actually required. Leave them to be optional otherwise.\n- has property names that are descriptive and clear.\n- clearly conveys the structure and the hierarchy of the data. The root element is always of object type and contains a property with the name describing the overall data structure."
      },
      "metadata": {
        "visual": {
          "x": 148,
          "y": -206
        }
      }
    },
    {
      "id": "runJavascript-42565a61",
      "type": "runJavascript",
      "metadata": {
        "visual": {
          "x": 510,
          "y": -209
        }
      },
      "configuration": {
        "name": "run",
        "code": "const run = ({ json }) => ({json});",
        "raw": "on"
      }
    }
  ],
  "edges": [
    {
      "from": "input",
      "to": "worker-5288aa40",
      "out": "passage",
      "in": "context",
      "constant": false
    },
    {
      "from": "worker-5288aa40",
      "to": "structuredWorker-6c243b4b",
      "out": "context",
      "in": "context",
      "constant": false
    },
    {
      "from": "structuredWorker-6c243b4b",
      "to": "output",
      "out": "json",
      "in": "json",
      "constant": false
    },
    {
      "from": "worker-5288aa40",
      "to": "output",
      "out": "text",
      "in": "text",
      "constant": false
    }
  ]
}